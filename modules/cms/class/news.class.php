<?php/** * This class handles news or blog administration. * * Copyright (C) <2014> <Frederik Yssing> * This program is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * (at your option) any later version. * * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program.  If not, see <http://www.gnu.org/licenses/>. * * @category   	CMS methods * @package		news/blog * @author		Frederik Yssing <yssing@yssing.org> * @copyright	2012-2014 Yssing * @version		SVN: 1.0.0 * @link		http://www.yssing.org * @since		File available since Release 1.0.0 * @require		'database.class.php' */class news {	/**     * This method creates a new row in the news table.	 *	 * @param string $headline the headline.	 * @param string $teaser The teaser content of the news.	 * @param string $body The full content of the news.	 * @param datetime $online guess what :)	 * @param datetime $offline guess what :)	 * @param string $icon if any picture is being used	 * @param int $sticky does the news stay on top.	 *	 * @return bool true on success or false on failure.	 *	 * @access public	 * @since Method available since Release 1.0.0     */	public static function createNews($headline,$teaser,$body,$online,$offline,$icon,$sticky){		$dbobject = new dbobject('cms_news');		$dbobject->create('Headline',$headline);		$dbobject->create('Teaser',$teaser);		$dbobject->create('BodyText',$body);		$dbobject->create('OnlineDate',$online);		$dbobject->create('OfflineDate',$offline);		$dbobject->create('Icon',$icon);		$dbobject->create('Sticky',$sticky);		$dbobject->create('Language',language::get());		if ($dbobject->commit()){			return $dbobject->readLastEntry();		} 		return false;	}		/**     * This method updates a news item with all the current parameters.	 *	 * @param int $newsid the news item.  	 * @param string $headline the headline.	 * @param string $teaser The content of the news.	 * @param string $body The complete content of the news.	 * @param datetime $online guess what :)	 * @param datetime $offline guess what :)	 * @param string $icon if any picture is being used	 * @param int $sticky does the news stay on top.	 *	 * @return bool true on success or false on failure.	 *	 * @access public	 * @since Method available since Release 1.0.0     */	public static function updateNews($newsid,$headline,$teaser,$body,$online,$offline,$icon,$sticky){		$dbobject = new dbobject('cms_news');		$dbobject->update('Headline',$headline);		$dbobject->update('Teaser',$teaser);		$dbobject->update('BodyText',$body);		$dbobject->update('OnlineDate',$online);		$dbobject->update('OfflineDate',$offline);		$dbobject->update('Icon',$icon);		$dbobject->update('Sticky',$sticky);		$dbobject->where("PK_NewsID",$newsid);		return $dbobject->commit();	}	/**     * This method reads and returns the news table.	 *	 * @return array/bool The table on succes false on failure.	 	 *	 * @access public	 * @since Method available since Release 1.0.0     */	public static function listNews(){		$dbobject = new dbobject('cms_news');		$dbobject->read("PK_NewsID");		$dbobject->read("Headline");		$dbobject->read("Teaser");		$dbobject->where("Language",language::get());		$dbobject->orderby("PK_NewsID","DESC");		return $dbobject->fetch();			}			/**     * This method finds news items and organise them in an associative array.	 *	 * @param int $max How many items to show.	 *	 * @return items The news found.	 	 *	 * @access public	 * @since Method available since Release 1.0.0     */	public static function listUserNews($max = 5){		$dbobject = new dbobject('cms_news');		$dbobject->join('user', 'PK_UserID', 'FK_UserID');				$dbobject->read("UserFirstName");		$dbobject->read("UserLastName");		$dbobject->read("PK_NewsID");		$dbobject->read("Headline");		$dbobject->read("Teaser");		$dbobject->read("BodyText");		$dbobject->read("icon");		$dbobject->read(TPREP."cms_news.CreateDate");		$dbobject->where("Language",language::get());		$dbobject->where("OnlineDate",calendar::now(),"<");		$dbobject->where("OfflineDate",calendar::now(),">");		$dbobject->orderby("PK_NewsID","DESC");		$dbobject->limit($max);		$result = $dbobject->fetch('FETCH_ASSOC');		return $result;	}			/**     * This method finds all the information relating to the id given.	 *	 * @param int $newsid The private key to the table.	 *	 * @return array The table row found.	 *	 * @access public	 * @since Method available since Release 1.0.0     */	public static function readUserNews($newsid){		$dbobject = new dbobject('cms_news');		$dbobject->join('user', 'PK_UserID', 'FK_UserID');		$dbobject->read("UserFirstName");		$dbobject->read("UserLastName");		$dbobject->read("PK_NewsID");		$dbobject->read("Headline");		$dbobject->read("Teaser");		$dbobject->read("BodyText");		$dbobject->read("icon");		$dbobject->read(TPREP."cms_news.CreateDate");		$dbobject->where("PK_NewsID",$newsid);		$dbobject->where("Language",language::get());		$result = $dbobject->fetchSingle('FETCH_ASSOC');		return $result;		}		/**	 * Read a news item for editing	 */	public static function readNews($newsid){		$dbobject = new dbobject('cms_news');		$dbobject->read("PK_NewsID");		$dbobject->read("Headline");		$dbobject->read("Teaser");		$dbobject->read("BodyText");		$dbobject->read("OnlineDate");		$dbobject->read("OfflineDate");		$dbobject->read("icon");		$dbobject->read("Sticky");		$dbobject->read("CreateDate");		$dbobject->read("FK_UserID");		$dbobject->where("PK_NewsID",$newsid);		$dbobject->where("Language",language::get());		return $dbobject->fetchSingle();	}			/**     * This method deletes a news entry in the database.	 *	 * @param int $newsid The private key to the table.	 *	 * @return bool True on success or false on failure.	 *	 * @access public	 * @since Method available since Release 1.0.0     */			public static function destroyNews($newsid){		$dbobject = new dbobject('cms_news');		$dbobject->destroy();		$dbobject->where("PK_NewsID",$newsid);		return $dbobject->commit();	}}?>